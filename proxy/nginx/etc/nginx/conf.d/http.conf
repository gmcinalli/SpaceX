http {
        include mime.types;
        default_type application/octet-stream;

        log_format main
                '$remote_addr - $remote_user [$time_local] "$request" '
                '$status $body_bytes_sent "$http_referer" '
                '"$http_user_agent" "$http_x_forwarded_for"';
        access_log /var/log/nginx/access.log main;

        gzip on;
        sendfile on;
        keepalive_timeout 65;
        client_max_body_size 20M;

        map $http_upgrade $connection_upgrade {
                default upgrade;
                '' close;
        }

        # Nginx caches IPs of DNS names, which is a problem with Docker Containers.
        # When a container is rebooted it gains a new IP, with Nginx failing
        # with Bad Gateway error.
        # This technique avoids caching the IPs of the DNS names.
        resolver 127.0.0.11 ipv6=off; # Docker DNS Resolver IP.

        server {
                listen 80;

                # Web App Proxy.
                location ^~ / {
                        set $web "http://web:8000";
                        proxy_pass $web;

                        proxy_buffering off;
                        proxy_redirect off;
                        proxy_set_header Host $host;
                        proxy_set_header X-Addr $remote_addr;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header Accept-Encoding "";
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header X-Forwarded-Host $server_name;

                        # Vue Hot Reloading protocol.
                        proxy_http_version 1.1;
                        proxy_set_header Upgrade $http_upgrade;
                        proxy_set_header Connection $connection_upgrade;
                }

                # Rest API Proxy.
                location ^~ /api {
                        set $rest "http://rest:8080";
                        rewrite /api/(.*) /$1 break;
                        proxy_pass $rest;
                }
        }
}
